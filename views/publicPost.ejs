<!DOCTYPE html>
<html lang="ko">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>익명 게시판</title>
  <link rel="stylesheet" href="./publicPost.css">
  <!-- axios CDN -->
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<header class="header">
  <nav class="navbar">
    <div class="menu-icon">☰</div>
    <h1 class="logo">익명 게시판</h1>
    <div class="settings-icon">⚙</div>
  </nav>
</header>

<body>
  <div id="plus-button" class="plus-button">+</div>

  <!-- 모달 배경 -->
  <div id="modal-background" class="modal-background" style="display:none;"></div>

  <!-- 모달 창 -->
  <div id="modal" class="modal" style="display:none;">
    <!-- 모달 내용 -->
    <div class="modal-content">
      <!-- 모달 닫기 버튼 -->
      <span id="close-modal" class="close-modal">&times;</span>

      <!-- 글쓰기 폼 -->
      <form id="post-form">
        <h2>게시글 작성</h2>
        <input type="text" id="post-title" name="title" placeholder="제목을 입력하세요">
        <textarea id="post-content" name="content" placeholder="내용을 입력하세요"></textarea>
        <button type="submit">등록하기</button>
      </form>
    </div>
  </div>

  <!-- 게시물 목록 (동적으로 생성될 예정)-->
  <div id="posts-container">
    <!-- 게시물들이 여기에 추가됩니다 -->
  </div>

  <script>
    // 페이지 로드 시 실행되는 함수
    document.addEventListener('DOMContentLoaded', function () {
      // 게시물을 동적으로 생성하는 로직 (임시 데이터 사용)
      addPosts();

      // 모달 관련 이벤트 리스너 추가
      document.getElementById('plus-button').addEventListener('click', openModal);
      document.getElementById('close-modal').addEventListener('click', closeModal);
      document.getElementById('modal-background').addEventListener('click', closeModal);

      // 게시물 등록 폼 제출 이벤트 리스너
      document.getElementById('post-form').addEventListener('submit', submitPostForm);
    });

    function openModal() {
      document.getElementById('modal-background').style.display = 'block';
      document.getElementById('modal').style.display = 'block';
    }

    function closeModal() {
      document.getElementById('modal-background').style.display = 'none';
      document.getElementById('modal').style.display = 'none';
    }

    function submitPostForm(event) {
      event.preventDefault(); // 폼 기본 제출 동작 방지

      let postTitle = document.getElementById('post-title').value;
      let postContent = document.getElementById('post-content').value;

      let postData = { title: postTitle, content: postContent };

      axios.post('서버의_데이터_처리_URL', postData)
        .then(function (response) {
          addPostToPage(postData); // 페이지에 게시물 추가
          closeModal();
          document.getElementById('post-form').reset();
        })
        .catch(function (error) {
          console.error(error); // 오류 처리
        });
    }

    function addPostToPage(postData) {
      let newPost = document.createElement('div');
      newPost.className = 'post';
      newPost.innerHTML = `
        <div class="post-title">${postData.title}</div>
        <div class="post-content">${postData.content}</div>
        <div class="post-date">${new Date().toLocaleString('ko-KR')}</div>
      `;
      document.getElementById('posts-container').appendChild(newPost);
    }

    // 임시 데이터로 게시물을 생성하는 함수
    function addPosts() {
      // 여기에 서버로부터 게시물 목록을 가져오는 로직을 구현
      // 예시 코드
      let postsData = [
        { title: '게시글1', content: '내용입니다 아아아아아아' },
        { title: '게시글2', content: '다른 내용입니다.' }
      ];

      postsData.forEach(function (postData) {
        addPostToPage(postData);
      });
    }

    // 1. 게시글에 클릭 이벤트 리스너 추가  
    function addPostToPage(postData) {
      let newPost = document.createElement('div');
      newPost.className = 'post';
      newPost.innerHTML = `
    <div class="post-title">${postData.title}</div>
    <div class="post-content">${postData.content}</div>
    <div class="post-date">${new Date().toLocaleString('ko-KR')}</div>
  `;
      newPost.onclick = function () {
        // 게시글 클릭 시 상세 정보를 가져오는 함수 호출
        fetchPostDetails(postData.id);
      };
      document.getElementById('posts-container').appendChild(newPost);
    }

    // 2. 게시글 상세 정보 요청 표시 함수
    function fetchPostDetails(postId) {
      axios.get(`/api/posts/${postId}`)
        .then(function (response) {
          const postData = response.data;
          // 여기에 상세 정보를 표시하는 로직을 구현합니다.
          // 예: 모달 창에 게시글 정보 표시
          showPostDetailsInModal(postData);
        })
        .catch(function (error) {
          console.error('게시글 상세 정보 로딩 실패', error);
        });
    }

    //  3. 상세 정보를 표시하는 함수
    function showPostDetailsInModal(postData) {
      // 모달 내용을 게시글 정보로 채우기
      document.getElementById('modal-post-title').textContent = postData.title;
      document.getElementById('modal-post-content').textContent = postData.content;
      // 모달 표시
      openModal();
    }
  </script>
</body>

</html>