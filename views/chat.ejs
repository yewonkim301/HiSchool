<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>DM</title>
    <!-- cdn -->
    <!-- <script src="/socket.io/socket.io.js"></script> -->
    <script
      src="https://cdn.socket.io/4.7.2/socket.io.min.js"
      integrity="sha384-mZLF4UVrpi/QTWPA7BjNPEnkIfRFn4ZEO3Qt/HFklTJBj/gBOV8G3HcKn4NfQblz"
      crossorigin="anonymous"
    ></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <style>
      .container {
        margin-top: 61.6px !important;
        margin-bottom: 100.8px !important;
      }

      @media (max-width: 640px) {
        .container {
          margin: 0 !important;
          padding: 0 !important;
          margin-top: 56.8px !important;
          margin-bottom: 100.8px !important;
        }

        #chat {
          max-width: 600px !important;
        }
      }

      #body {
        width: 100%;
        max-width: 600px;
        margin: 0 auto;
        /* height: calc(100vh - 130px);
        position: fixed; */
        top: 0;
        left: 0;
        background: var(--color-primary-100);
        /* overflow: scroll; */
      }

      #chat {
        position: fixed;
        bottom: 0px;
        display: flex;
        justify-content: space-between;
        max-width: 560px;
        box-sizing: border-box;
        background-color: var(--color-gray-50);
        padding: 20px;
        flex-direction: row;
        gap: 12px;
      }

      #chat input {
        /* width: 80%; */
        padding: 20px;
        border: 1px solid var(--color-gray-100);
        box-sizing: border-box;
        color: var(--color-gray-500);
        background-color: var(--color-gray-100);
        border-radius: 8px;
        border: 1px solid var(--color-gray-200);
        width: 100%;
      }

      #chat button {
        width: 80px;
      }

      .my-chat {
        display: flex;
        justify-content: end;
        padding: 2px 0px;
      }

      .my-chat p {
        margin: 0;
        padding: 10px;
        background: var(--color-primary-400);
        border-radius: 8px;
        margin-right: 10px;
      }

      .otherMsg {
        display: flex;
        flex-direction: row;
      }

      .other-chat {
        display: flex;
        flex-direction: column;
        justify-content: start;
        padding: 2px 0px;
      }

      .other-chat p {
        margin: 0;
        padding: 10px;
        background: white;
        border-radius: 8px;
        margin-left: 10px;
      }

      #notice {
        display: flex;
        flex-direction: column;
        text-align: center;
        color: gray;
      }

      #notice p {
        margin: 0;
      }

      .secret-chat p {
        background: pink;
      }

      p.mychatMsg {
        color: white !important;
      }

      p.mychatTime,
      p.otherchatTime {
        padding: 0;
        background: none;
        display: flex;
        align-self: self-end;
        font-size: 0.8rem !important;
        color: var(--color-gray-400) !important;
      }

      p.otherchatName {
        background: none;
        margin: 0;
        /* padding: 0; */
      }
    </style>
  </head>

  <body>
    <div id="main">
      <form id="room">
        <input
          type="text"
          id="roomName"
          placeholder="채팅방 만들기"
          value="<%= room %>"
        />
        <input
          type="text"
          id="userName"
          placeholder="사용자 이름 입력"
          value="<%= myNickname %>"
        />
        <input
          type="text"
          id="userid_num"
          placeholder="사용자 이름 입력"
          value="<%= userid_num %>"
        />
        <button type="submit" id="btn">만들기</button>
      </form>

      <ul id="lists"></ul>
    </div>

    <div id="body" hidden>
      <div id="msg">
        <div id="notice"></div>
        <% for(let i=0; i < chats.length; i++) { %> <% if(myNickname ===
        chats[i].from_nick){ %>
        <div class="my-chat">
          <p class="mychatTime"><%= chats[i].createdAt %></p>
          <p class="mychatMsg"><%= chats[i].dm_content %></p>
        </div>
        <!-- <div class="my-chat"></div> -->
        <% } else { %>
        <div class="other-chat">
          <p class="otherchatName"><%= chats[i].from_nick %></p>
          <div class="otherMsg">
            <p class="otherchatMsg"><%= chats[i].dm_content %></p>
            <p class="otherchatTime"><%= chats[i].createdAt %></p>
          </div>
        </div>
        <!-- <div class="other-chat"></div> -->
        <% } %> <% } %>
      </div>

      <form id="chat">
        <input type="text" id="message" placeholder="메세지 입력" />
        <button>입력</button>
      </form>
    </div>

    <script>
      const dotenv = require("dotenv");
      dotenv.config();
      window.onload = async function () {
        // 버튼 요소를 찾아서 클릭 이벤트 발생
        var myButton = document.getElementById("btn");
        myButton.click();
      };

      const socket = io(
        `http://<%= process.env.AWS_ADDRESS %>:<%= process.env.PORT2 %>`,
        {
          transports: ["websocket"],
          upgrade: false,
        }
      );
      const roomForm = document.querySelector("#room");
      const chatForm = document.querySelector("#chat");
      const msg = document.querySelector("#msg");
      const notice = document.querySelector("#notice");

      let myName;
      let enter;

      //메세지 띄우기
      socket.on("newMessage", (message, nick) => {
        const div = document.createElement("div");
        const p = document.createElement("p");
        if (myName === nick) {
          //내가입력한 텍스트
          div.classList.add("my-chat");
          // div.innerHTML = `<p class="mychatTime">${message.createdAt}</p>`
        } else {
          div.classList.add("other-chat");
          // div.innerHTML = `<p class="mychatTime">${message.createdAt}</p>`
        }

        // //채팅 텍스트
        // if (myName === nick) {
        //   p.textContent = `${message.dm_content} `;
        //   div.appendChild(p);
        //   msg.appendChild(div);
        // } else {
        //   p.textContent = `${nick} : ${message.dm_content}`;
        //   div.appendChild(p);
        //   msg.appendChild(div);
        // }

        if (myName === nick) {
          p.textContent = `${message.dm_content} `;
        } else {
          p.textContent = `${nick} : ${message.dm_content}`;
        }

        div.appendChild(p);

        const timeP = document.createElement("p");
        timeP.classList.add("mychatTime");
        timeP.textContent = message.createdAt;
        div.appendChild(timeP);

        msg.appendChild(div);

        // 이전 메시지의 시간 숨기기
        const myMessages = document.querySelectorAll(
          "#msg .my-chat .mychatTime"
        );
        const otherMessages = document.querySelectorAll(
          "#msg .other-chat .mychatTime"
        );

        myMessages.forEach((time, index) => {
          if (index !== myMessages.length - 1) {
            time.style.display = "none";
          }
        });

        otherMessages.forEach((time, index) => {
          if (index !== otherMessages.length - 1) {
            time.style.display = "none";
          }
        });
      });
      //입장 메세지 이벤트
      socket.on("notice", (message) => {
        // 한번 입장 했었으면 다시 안뜨게
        if (enter !== message) {
          enter = message;
          const div = document.createElement("div");
          const p = document.createElement("p");
          p.textContent = message;
          div.appendChild(p);
          notice.appendChild(div);
        }
      });

      ///폼 이벤트
      roomForm.addEventListener("submit", (e) => {
        e.preventDefault();
        socket.emit("create", roomName.value, userName.value, () => {
          const main = document.querySelector("#main");
          const body = document.querySelector("#body");
          main.hidden = true;
          body.hidden = false;
          //전역변수에 입력한 닉네임을 저장
          myName = userName.value;
        });
      });

      chatForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        const message = document.querySelector("#message");
        console.log("myName >>>>>", myName);
        const msg = {
          room: `<%= room %>`,
          from_nick: myName,
          message: message.value,
          userid_num: `<%= userid_num %>`,
        };
        console.log("chat msg from nick >>>>>>", msg.from_nick);
        socket.emit("sendMessage", msg, myName);
        message.value = "";
      });
    </script>
  </body>
</html>
