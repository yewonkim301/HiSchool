<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <!-- style.css  -->
  <link rel="stylesheet" href="/style.css">
  <!-- axios CDN -->
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <!-- jquery CDN -->
  <script src="https://code.jquery.com/jquery-3.7.1.min.js"
    integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
  <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"
    integrity="sha256-lSjKY0/srUM9BE3dPm+c4fBo1dky2v27Gdjm2uoZaL0=" crossorigin="anonymous"></script>
  <title>하이스쿨 - 게시글 작성</title>
  <style>
    .textField {
      width: 100%;
      height: 300px;
    }

    .textField-title {
      height: 100%;
    }

    #motivation,
    #introduction {
      height: 11rem;
    }


    .textNum {
      display: flex;
      justify-content: space-between;

    }


    

    #image_preview input[type="file"] {
    position: absolute;
    width: 0;
    height: 0;
    padding: 0;
    overflow: hidden;
    border: 0;
}


.btn-upload {
  width: 150px;
  height: 30px;
  background-color: var(--color-primary-500);
  color: white;
  border-radius: 4px;
  font-weight: 500;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  &:hover {
    background: var(--color-primary-600);
    color: #fff;
  }
}

.btn-upload:hover {
  background-color: var(--color-primary-600);
}

#file {
  display: none;
}


#btnAtt {
  display: none;
}




    #att_zone{
	width: 100%;
  display: flex;
  gap: 4px;
}

#att_zone:empty:before{
	content : attr(data-placeholder);
	color : #999;
	font-size:.9em;
}

#image_preview {
  display: flex;
  flex-direction: column;
  gap: 8px;
}


  </style>
</head>

<body>
  <%- include('../component/header') %>
    <main class="container">
      <div>
        <!-- 글쓰기 폼 -->
        <form id="post-form" name="add-post">
          <h2>게시글 작성</h2>
          <label for="post-title">제목
            <input type="text" id="post-title" class="textField textField-title" name="title" placeholder="제목을 입력하세요" />
            <div class="textNum">
              <div class="helpText">최대 30글자까지 입력가능합니다</div>
              <div class="helpText">
                <span class="motivationCount">0</span>/30
              </div>
            </div>
          </label>

          <label for="post-content">내용
            <textarea id="post-content" class="textField" name="content" placeholder="내용을 입력하세요"></textarea>
            <div class="textNum">
              <div class="helpText">최대 500글자까지 입력가능합니다</div>
              <div class="helpText">
                <span class="introductionCount">0</span>/500
              </div>
            </div>
          </label>
          <!-- <input type="file" name="filesInput" id="filesInput" accept="image/*" onchange="uploadToClient()" multiple />
          <div id="preview"></div> -->

          <label for="btnAtt">
            <div class="btn-upload">이미지 업로드</div>
          </label>
          <input type='file' id='btnAtt' multiple accept="image/*" onchange="uploadToClient(); "/>
          <div id='att_zone'></div>

        <button type="button" onclick="onUpload()">파일 확인</button>

          <div>
            <button type="button" class="btn btn-primary " onclick="addpost()">
              등록하기
            </button>
          </div>
        </form>
      </div>
    </main>

    <script>
      const form = document.forms["add-post"];


      function readURL(input) { }
      function readFiles() {
        var files = document.getElementById("btnAtt").files;

        for (var i = 0; i < files.length; i++) {
          alert(files[i].name);
        }
      }






      let createObjectURL = null;
      let images = null;
      let imagesArr = [];
      let payload = [];
      const uploadFiles = document.querySelector("#btnAtt");
      let uploadedFileUrl = "";
      let uploadedUrl = [];
      let uploadImages = [];



      
var attZone = document.getElementById('att_zone');
var btnAtt = document.getElementById('btnAtt')
var sel_files = [];

// 이미지와 체크 박스를 감싸고 있는 div 속성
var div_style = 'display:flex; position:relative; gap: 4px;'
              + 'width: calc( (100% - 40px) / 5); aspect-ratio: 1/1; gap: 4px; object-fit: cover; z-index:1';
// 미리보기 이미지 속성
var img_style = 'width:100%;z-index:none; object-fit: cover;';
// 이미지안에 표시되는 체크박스의 속성
var chk_style = 'width:30px;height:30px;position:absolute;font-size:24px;'
              + 'right:0px;bottom:0px;z-index:999;background-color:rgba(255,255,255,0.1);color:#f00';





      
  
/*첨부된 이미리즐을 배열에 넣고 미리보기 */
imageLoader = function(file){
  sel_files.push(file);
  var reader = new FileReader();
  reader.onload = function(ee){
    let img = document.createElement('img')
    img.setAttribute('style', img_style)
    img.src = ee.target.result;
    attZone.appendChild(makeDiv(img, file));
  }
  
  reader.readAsDataURL(file);
}


      function uploadToClient() {



        

        var files = uploadFiles.files;
  var fileArr = Array.prototype.slice.call(files)
  for(f of fileArr){
    imageLoader(f);
  }











        console.log('uploadToClient 실행');
        if (createObjectURL) {
          URL.revokeObjectUrl(createObjectURL);
        }

        console.log("282 : uploadedFiles", uploadFiles);
        if (uploadFiles.files && uploadFiles.files[0]) {
          console.log('if문 안으로');
          console.log(uploadFiles.files.length);
          for (i = 0; i < uploadFiles.files.length; i++) {
            console.log(i);
            const img = uploadFiles.files[i];
            imagesArr.push(uploadFiles.files[i]);
            images = img;
            console.log("286 images", images);
            createObjectURL = URL.createObjectURL(img);
          }
        }

        console.log('images', images);
        console.log('imagesArr', imagesArr);
        console.log('imagesArr type', imagesArr[0].type);



        for (i = 0; i < imagesArr.length; i++) {
          payload.push({
            name: Math.random().toString(36).substring(2, 32),
            type: imagesArr[i].type
          });
        }


      }


      async function handleSignedUrl() {
        const uploadedFileOriginUrl = await uploadImgClient();
        console.log(uploadedFileOriginUrl);
      }



      async function uploadImgClient() {
        console.log("uploadImgClient 실행");
        try {
          const result = await axios({
            method: "POST",
            url: "/s3MultipleSignedUrl",
            data: payload
          });

          const axiosResult = result;
          console.log("axiosResult : ", axiosResult);
          const signedUrl = axiosResult.data;
          console.log("signedURL", signedUrl);



          for (i = 0; i < signedUrl.length; i++) {
            const uploadRes = await axios({
              method: "PUT",
              url: signedUrl[i],
              data: imagesArr[i],
            });
            console.log("uploadRes : ", uploadRes.config.url);
            uploadedUrl.push(uploadRes.config.url);
            console.log('uploadedUrl', uploadedUrl);
          }

          return uploadedUrl;
        } catch (err) {
          console.log(err);
        }
      }


      // 유효성 검사 (글자수 세기, 글자수 넘어가면 경고 문구 보여주고 더이상 타이핑 되지 않도록 하기)
      $('#post-title').keyup(function (e) {
        let content1 = $(this).val();

        // 글자수 세기
        if (content1.length == 0 || content1 == '') {
          $('.motivationCount').text('0');
        } else {
          $('.motivationCount').text(content1.length);
        }



        // 글자수 제한
        if (content1.length > 29) {

          $(this).val($(this).val().substring(0, 29));

        };
      });


      $('#post-content').keyup(function (e) {
        let content2 = $(this).val();

        // 글자수 세기
        if (content2.length == 0 || content2 == '') {
          $('.introductionCount').text('0');
        } else {
          $('.introductionCount').text(content2.length);
        }
        if (content2.length > 500) {

          $(this).val($(this).val().substring(0, 500));

        };
      });



      async function addpost() {
        var title = document.getElementById('post-title').value;
        var content = document.getElementById('post-content').value;
        var files = document.getElementById('btnAtt').files;

        // 제목 유효성 검사: 한글일 경우 30자, 영어일 경우 100자
        if ((/[가-힣]/.test(title) && title.length > 30) || (!/[가-힣]/.test(title) && title.length > 100)) {
          alert('제목은 한글로는 30자 이하, 영어로는 100자 이하로 입력해주세요.');
          return false;
        }

        // 내용 유효성 검사: 한글 500자 이하
        if (content.length > 500) {
          alert('내용은 500자 이하로 입력해주세요.');
          return false;
        }

        // 파일 유효성 검사: 5장 이하
        if (files.length > 5) {
          alert('사진은 최대 5장까지 업로드 가능합니다.');
          return false;
        }

        // 여기에 폼 제출 코드를 추가
        // 예: document.getElementById('post-form').submit();

        const uploadedFileOriginUrl = await uploadImgClient();
        if (uploadedFileOriginUrl !== null) {
          console.log("presignedURL 있어요");
          console.log('uploadedFileOriginUrl', uploadedFileOriginUrl);

          for (i = 0; i < uploadedFileOriginUrl.length; i++) {
            const parts = uploadedFileOriginUrl[i].split("/");
            uploadImages.push(parts[parts.length - 1].split("?")[0]);
          }

          console.log('uploadedImages', uploadImages);

        } else {
          console.log("presignedURL 없어요");
          uploadImages = "";
        }

        console.log("uploadImages", uploadImages);


        await axios({
          method: "POST",
          url: `/myclubNewPost/<%= data %>`,
          data: {
            // 클라이언트에서 서버로 전달할 club_id
            // userid_num: "2", // 임시 데이터
            title: form.title.value,
            content: form.content.value,
            image: uploadImages,
          },
        }).then((res) => {
          console.log(res.data);
          if (res.status === 200) {
            const club_id = res.data.club_id; // 응답으로부터 post_id를 얻음
            const post_id = res.data.post_id; // 응답으로부터 post_id를 얻음
            alert("게시물 등록완료");
            // 새 게시물 엘리먼트 생성
            const newPostElement = document.createElement("div");
            newPostElement.innerHTML = `
                  <h3>${form.title.value}</h3>
                  <p>${form.content.value}</p>
               `;
            window.location.href = `/myclubPostDetail/${club_id}/${post_id}`;
          }
        });
      }



      imageView = function imageView(att_zone, btn){


// // 탐색기에서 드래그앤 드롭 사용
// attZone.addEventListener('dragenter', function(e){
//   e.preventDefault();
//   e.stopPropagation();
// }, false)

// attZone.addEventListener('dragover', function(e){
//   e.preventDefault();
//   e.stopPropagation();
  
// }, false)

// attZone.addEventListener('drop', function(e){
//   var files = {};
//   e.preventDefault();
//   e.stopPropagation();
//   var dt = e.dataTransfer;
//   files = dt.files;
//   for(f of files){
//     imageLoader(f);
//   }
  
// }, false)


/*첨부된 파일이 있는 경우 checkbox와 함께 attZone에 추가할 div를 만들어 반환 */
makeDiv = function(img, file){
  var div = document.createElement('div')
  div.setAttribute('style', div_style)
  
  var btn = document.createElement('input')
  btn.setAttribute('type', 'button')
  btn.setAttribute('value', 'x')
  btn.setAttribute('delFile', file.name);
  btn.setAttribute('style', chk_style);
  btn.onclick = function(ev){
    var ele = ev.srcElement;
    var delFile = ele.getAttribute('delFile');
    for(var i=0 ;i<sel_files.length; i++){
      if(delFile== sel_files[i].name){
        sel_files.splice(i, 1);      
      }
    }
    
    dt = new DataTransfer();
    for(f in sel_files) {
      var file = sel_files[f];
      dt.items.add(file);
    }
    btnAtt.files = dt.files;
    var p = ele.parentNode;
    attZone.removeChild(p)
  }
  div.appendChild(img)
  div.appendChild(btn)
  return div
}
}('att_zone', 'btnAtt')

    </script>
</body>

</html>