<!DOCTYPE html>
<html lang="ko">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <!-- axios CDN -->
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <link rel="stylesheet" href="../../static/style.css">
  <!-- jquery CDN -->
  <script src="https://code.jquery.com/jquery-3.7.1.min.js"
    integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
  <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"
    integrity="sha256-lSjKY0/srUM9BE3dPm+c4fBo1dky2v27Gdjm2uoZaL0=" crossorigin="anonymous"></script>
  <style>
    .textField {
      width: 100%;
    }

    .textField-title {
      height: 100%;
    }


    #motivation,
    #introduction {
      height: 11rem;
    }


    .textNum {
      display: flex;
      justify-content: space-between;

    }


    .postImages {
      display: flex;
      flex-direction: column;
      gap: 20px;
      width: 100px;
    }


    #image_preview input[type="file"] {
    position: absolute;
    width: 0;
    height: 0;
    padding: 0;
    overflow: hidden;
    border: 0;
}

.s3image {
  position: relative;
}

.imageDeleteButton {
  position: absolute;
}


.btn-upload {
  width: 150px;
  height: 30px;
  background-color: var(--color-primary-500);
  color: white;
  border-radius: 4px;
  font-weight: 500;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  &:hover {
    background: var(--color-primary-600);
    color: #fff;
  }
}

.btn-upload:hover {
  background-color: var(--color-primary-600);
}

#file {
  display: none;
}


#btnAtt {
  display: none;
}





    #btnAtt {
      display: inline-block;
    height: 40px;
    padding: 0 10px;
    vertical-align: middle;
    border: 1px solid #dddddd;
    color: #999999;
    }

    #att_zone{
	width: 100%;
  display: flex;
  gap: 4px;
}

#att_zone:empty:before{
	content : attr(data-placeholder);
	color : #999;
	font-size:.9em;
}

#image_preview {
  display: flex;
  flex-direction: column;
  gap: 8px;
}
  </style>
</head>

<body>
  <%- include('../component/header') %>
    <main class="container">
      <div>
        <div class="board">
          <!-- 수정 폼 -->
          <form id="editForm">
            <div class="input">
              <label for="title">제목</label>
              <input type="text" id="title" class="textField-title textField" value="<%= data.title %>">
              <div class="textNum">
                <div class="helpText">최대 30글자까지 입력가능합니다</div>
                <div class="helpText">
                  <span class="motivationCount">0</span>/30
                </div>
              </div>
            </div>
            <div class="input">
              <label for="content">내용</label>
              <textarea id="content" class="textField"><%= data.content %></textarea>
              <div class="textNum">
                <div class="helpText">최대 500글자까지 입력가능합니다</div>
                <div class="helpText">
                  <span class="introductionCount">0</span>/500
                </div>
              </div>
            </div>
            <!-- <input type="file" name="filesInput" id="filesInput" accept="image/*" onchange="uploadToClient()"
              multiple />
            <div id="preview"></div> -->
            <div id='image_preview'>

              <label for="btnAtt">
                <div class="btn-upload">이미지 업로드</div>
              </label>
              <input type='file' id='btnAtt' multiple accept="image/*" onchange="uploadToClient(); "/>
              <div id='att_zone'>
                <% let parsedPostImages=[] %>
                <% for(i=0; i < postImages.length; i++) { %>
                  <% const parts=postImages[i].split("/") %>
                    <% parsedPostImages.push(parts[parts.length -1].split("?")[0]) %>
                      <img src="<%= postImages[i] %>" alt="" class="s3image image<%= i %>" style="display:flex; position:relative; gap: 4px; width: calc( (100% - 40px) / 5); aspect-ratio: 1/1; gap: 4px; object-fit: cover; z-index:1;" />
                      <button type="button" class="imageDeleteButton image<%= i %>"
                        onclick="handleDeleteImage('<%= parsedPostImages[i] %>')" style="width:30px;height:30px;position:absolute;font-size:24px; right:0px;bottom:0px;z-index:999;background-color:rgba(255,255,255,0.1);color:#f00;">삭제</button>
                  <% } %>
              </div>
    


            <div class="postImages">
              
            </div>





            



            <div class="cta">
              <button class="btn btn-secondary" onclick="deletepost()">삭제</button>
              <button type="button" class="btn btn-primary" onclick="submitEdit()">수정하기</button>
            </div>
          </form>
        </div>
      </div>
    </main>





    <script>
      const form = document.forms["add-post"];

      function readURL(input) { }

      function readFiles() {
        var files = document.getElementById("btnAtt").files;

        for (var i = 0; i < files.length; i++) {
          alert(files[i].name);
        }
      }

      let createObjectURL = null;
      let images = null;
      let imagesArr = [];
      let payload = [];
      const uploadFiles = document.querySelector("#btnAtt");
      let uploadedFileUrl = "";
      let uploadedUrl = [];
      let uploadImages = [];


      

      
var attZone = document.getElementById('att_zone');
var btnAtt = document.getElementById('btnAtt')
var sel_files = [];

// 이미지와 체크 박스를 감싸고 있는 div 속성
var div_style = 'display:flex; position:relative; gap: 4px;'
              + 'width: calc( (100% - 40px) / 5); aspect-ratio: 1/1; gap: 4px; object-fit: cover; z-index:1';
// 미리보기 이미지 속성
var img_style = 'width:100%;z-index:none; object-fit: cover;';
// 이미지안에 표시되는 체크박스의 속성
var chk_style = 'width:30px;height:30px;position:absolute;font-size:24px;'
              + 'right:0px;bottom:0px;z-index:999;background-color:rgba(255,255,255,0.1);color:#f00';





      
  
/*첨부된 이미지를 배열에 넣고 미리보기 */
imageLoader = function(file){
  sel_files.push(file);
  var reader = new FileReader();
  reader.onload = function(ee){
    let img = document.createElement('img')
    img.setAttribute('style', img_style)
    img.src = ee.target.result;
    attZone.appendChild(makeDiv(img, file));
  }
  
  reader.readAsDataURL(file);
}


      function uploadToClient() {



        

        var files = uploadFiles.files;
  var fileArr = Array.prototype.slice.call(files)
  for(f of fileArr){
    imageLoader(f);
  }







        if (createObjectURL) {
          URL.revokeObjectUrl(createObjectURL);
        }

        console.log("282 : uploadedFiles", uploadFiles);
        if (uploadFiles.files && uploadFiles.files[0]) {
          console.log('if문 안으로');
          console.log(uploadFiles.files.length);
          for (i = 0; i < uploadFiles.files.length; i++) {
            console.log(i);
            const img = uploadFiles.files[i];
            imagesArr.push(uploadFiles.files[i]);
            images = img;
            console.log("286 images", images);
            createObjectURL = URL.createObjectURL(img);
          }
        }

        console.log('images', images);
        console.log('imagesArr', imagesArr);
        console.log('imagesArr type', imagesArr[0].type);

        for (i = 0; i < imagesArr.length; i++) {
          payload.push({
            name: Math.random().toString(36).substring(2, 32),
            type: imagesArr[i].type
          });
        }
      }


      async function handleSignedUrl() {
        const uploadedFileOriginUrl = await uploadImgClient();
        console.log(uploadedFileOriginUrl);
      }

      async function uploadImgClient() {
        console.log("uploadImgClient 실행");
        try {
          const result = await axios({
            method: "POST",
            url: "/s3MultipleSignedUrl",
            data: payload
          });

          const axiosResult = result;
          console.log("axiosResult : ", axiosResult);
          const signedUrl = axiosResult.data;
          console.log("signedURL", signedUrl);



          for (i = 0; i < signedUrl.length; i++) {
            const uploadRes = await axios({
              method: "PUT",
              url: signedUrl[i],
              data: imagesArr[i],
            });
            console.log("uploadRes : ", uploadRes.config.url);
            uploadedUrl.push(uploadRes.config.url);
            console.log('uploadedUrl', uploadedUrl);
          }


          // console.log('first uploadedfileurl', uploadedFileUrl)
          return uploadedUrl;
        } catch (err) {
          console.log(err);
        }
      }

    </script>



    <script>


      const club_id = "<%=data.club_id%>";
      const post_id = "<%=data.post_id%>";

      console.log(club_id);


      // 유효성 검사 (글자수 세기, 글자수 넘어가면 경고 문구 보여주고 더이상 타이핑 되지 않도록 하기)
      $('#title').keyup(function (e) {
        let content1 = $(this).val();

        // 글자수 세기
        if (content1.length == 0 || content1 == '') {
          $('.motivationCount').text('0');
        } else {
          $('.motivationCount').text(content1.length);
        }



        // 글자수 제한
        if (content1.length > 30) {

          $(this).val($(this).val().substring(0, 30));

        };
      });

      $('#content').keyup(function (e) {
        let content2 = $(this).val();

        // 글자수 세기
        if (content2.length == 0 || content2 == '') {
          $('.introductionCount').text('0');
        } else {
          $('.introductionCount').text(content2.length);
        }
        if (content2.length > 500) {

          $(this).val($(this).val().substring(0, 500));

        };
      });



      async function submitEdit() {
        let title = document.getElementById('title').value;
        let content = document.getElementById('content').value;
        var files = document.getElementById('btnAtt').files;


        // 제목 유효성 검사
        if ((/[가-힣]/.test(title) && title.length > 30) || (!/[가-힣]/.test(title) && title.length > 100)) {
          alert('제목은 한글로는 30자 이하, 영어로는 100자 이하로 입력해주세요.');
          return false;
        }

        // 내용 유효성 검사
        if (content.length > 500) {
          alert('내용은 500자 이하로 입력해주세요.');
          return false;
        }

        // 파일 유효성 검사: 5장 이하
        if (files.length > 5) {
          alert('사진은 최대 5장까지 업로드 가능합니다.');
          return false;
        }


        const uploadedFileOriginUrl = await uploadImgClient();


        if (uploadedFileOriginUrl !== null) {
          console.log("presignedURL 있어요");
          console.log('uploadedFileOriginUrl', uploadedFileOriginUrl);

          for (i = 0; i < uploadedFileOriginUrl.length; i++) {
            const parts = uploadedFileOriginUrl[i].split("/");
            uploadImages.push(parts[parts.length - 1].split("?")[0]);
          }

          console.log('uploadedImages', uploadImages);

        } else {
          console.log("presignedURL 없어요");
          uploadImages = "";
        }

        console.log("uploadImages", uploadImages);




        // const image = document.getElementById('image').value;



        axios.patch(`/myclubEditPost/${club_id}/${post_id}`, {
          title: title,
          content: content,
          image: uploadImages,

        })
          .then(function (res) {
            alert('게시글이 수정되었습니다.');
            window.location.href = `/myclubPostDetail/${club_id}/${post_id}`;
          })
          .catch(function (err) {
            console.error('Edit error:', err);
            alert('게시글 수정 중 오류가 발생했습니다.');
          });
      }

      function deletepost() {
        if (confirm('게시글을 삭제하시겠습니까?')) {
          axios.delete(`/myclubEditPost/${club_id}/${post_id}`)
            .then(function (res) {
              if (res.data) {
                alert('게시글이 삭제되었습니다.');
                window.location.href = `/myClubPostMain/${club_id}`; // 게시글 목록으로 리디렉션
              } else {
                alert('게시글 삭제에 실패했습니다.');
              }
            })
            .catch(function (error) {
              alert('게시글 삭제 중 오류가 발생했습니다.');
              console.error('Delete error:', error);
            });
        }
      }


      async function handleDeleteImage(file) {
        console.log(file);

        const result = await axios({
          method: "POST",
          url: `/s3Delete/${club_id}/${post_id}`,
          data: {
            key: file
          }
        });

        console.log(result);
        if (result.data) {
          alert('삭제되었습니다');
          location.reload();
        }

      }




      imageView = function imageView(att_zone, btn){





/*첨부된 파일이 있는 경우 checkbox와 함께 attZone에 추가할 div를 만들어 반환 */
makeDiv = function(img, file){
  var div = document.createElement('div')
  div.setAttribute('style', div_style)
  
  var btn = document.createElement('input')
  btn.setAttribute('type', 'button')
  btn.setAttribute('value', 'x')
  btn.setAttribute('delFile', file.name);
  btn.setAttribute('style', chk_style);
  btn.onclick = function(ev){
    var ele = ev.srcElement;
    var delFile = ele.getAttribute('delFile');
    for(var i=0 ;i<sel_files.length; i++){
      if(delFile== sel_files[i].name){
        sel_files.splice(i, 1);      
      }
    }
    
    dt = new DataTransfer();
    for(f in sel_files) {
      var file = sel_files[f];
      dt.items.add(file);
    }
    btnAtt.files = dt.files;
    var p = ele.parentNode;
    attZone.removeChild(p)
  }
  div.appendChild(img)
  div.appendChild(btn)
  return div
}
}('att_zone', 'btnAtt')


    </script>

</body>

</html>